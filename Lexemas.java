/* The following code was generated by JFlex 1.6.1 */

package prueba.lexico;
import static prueba.lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/MiguelAngel/Documents/7mo semestre/Lenguajes y automatas 2/Prueba Lexico/src/prueba/lexico/Lexer.flex</tt>
 */
class Lexemas {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\61\1\61\1\61\1\61\22\0\1\57\2\0\1\54"+
    "\11\0\1\4\1\55\1\56\1\1\1\2\1\3\7\52\6\0\1\53"+
    "\1\36\1\60\1\21\1\45\1\22\1\32\1\14\1\50\1\20\1\40"+
    "\1\50\1\30\1\34\1\43\1\42\3\50\1\5\1\17\1\50\5\46"+
    "\6\0\1\13\1\33\1\24\1\26\1\11\1\47\1\31\1\51\1\6"+
    "\2\47\1\23\1\12\1\16\1\15\1\41\1\47\1\25\1\7\1\10"+
    "\1\27\1\44\2\47\1\37\1\35\12\0\1\61\113\0\1\46\37\0"+
    "\1\47\u1f36\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\2\1\3\1\2\1\4\1\3\1\4\6\0"+
    "\1\3\1\0\1\3\3\0\1\3\10\0\2\3\1\5"+
    "\25\0\1\3\22\0\1\5\62\0\1\6\1\0\1\7"+
    "\3\0\1\10\27\0\1\11\13\0\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\372\0\u012c"+
    "\0\310\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\372\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u02ee\0\u0514\0\u0352"+
    "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4"+
    "\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0320\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\62\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0"+
    "\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450"+
    "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0"+
    "\0\u1612\0\u1644\0\u1676\0\u16a8\0\62\0\u16da\0\u1518\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c"+
    "\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u01f4\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a"+
    "\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u01f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\2\1\5\1\6\1\7\3\6"+
    "\1\7\1\5\2\7\4\5\2\7\3\6\1\5\1\6"+
    "\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
    "\2\5\1\6\1\5\1\10\1\6\1\5\1\6\1\4"+
    "\5\2\1\11\64\0\1\12\2\13\1\14\45\15\1\13"+
    "\1\16\4\0\1\15\2\0\3\13\1\14\45\15\1\13"+
    "\1\16\4\0\1\15\2\0\3\15\1\14\1\17\6\20"+
    "\1\17\2\20\4\17\5\20\1\17\1\20\1\17\1\20"+
    "\1\17\1\20\1\17\1\20\1\17\1\20\2\17\1\20"+
    "\2\17\1\20\1\17\1\20\1\15\1\16\1\21\1\22"+
    "\1\0\1\23\1\17\2\0\3\15\1\14\1\15\6\24"+
    "\1\15\2\24\4\15\5\24\1\15\1\24\1\15\1\24"+
    "\1\15\1\24\1\15\1\24\1\15\1\24\2\15\1\24"+
    "\2\15\1\24\1\15\1\24\1\15\1\16\3\0\1\25"+
    "\1\15\2\0\3\15\1\14\1\17\6\26\1\17\2\26"+
    "\4\17\5\26\1\17\1\26\1\17\1\26\1\17\1\26"+
    "\1\17\1\26\1\17\1\26\2\17\1\26\2\17\1\26"+
    "\1\17\1\26\1\15\1\16\1\21\1\22\1\0\1\23"+
    "\1\17\2\0\3\27\1\14\45\15\1\27\1\16\4\0"+
    "\1\15\2\0\3\27\1\14\45\15\1\27\1\16\2\0"+
    "\1\30\1\0\1\15\2\0\3\15\1\0\46\15\5\0"+
    "\1\15\2\0\3\15\1\14\46\15\1\16\4\0\1\15"+
    "\32\0\1\31\5\0\1\32\11\0\1\33\11\0\3\15"+
    "\1\14\1\34\6\35\1\34\2\35\4\34\5\35\1\34"+
    "\1\35\1\34\1\35\1\34\1\35\1\34\1\35\1\34"+
    "\1\35\2\34\1\35\2\34\1\35\1\34\1\35\1\15"+
    "\1\16\1\21\1\36\1\0\1\23\1\34\2\0\3\15"+
    "\1\14\1\35\6\20\1\35\2\20\4\35\5\20\1\35"+
    "\1\20\1\35\1\20\1\35\1\20\1\35\1\20\1\35"+
    "\1\20\2\35\1\20\2\35\1\20\1\35\1\20\1\15"+
    "\1\16\1\21\1\37\1\0\1\40\1\35\3\0\2\41"+
    "\46\0\1\41\4\0\1\42\7\0\1\43\6\44\1\43"+
    "\2\44\4\43\5\44\1\43\1\44\1\43\1\44\1\43"+
    "\1\44\1\43\1\44\1\43\1\44\2\43\1\44\2\43"+
    "\1\44\1\43\1\44\2\0\1\21\2\0\1\23\1\43"+
    "\6\0\1\43\6\44\1\43\2\44\4\43\5\44\1\43"+
    "\1\44\1\43\1\44\1\43\1\44\1\43\1\44\1\43"+
    "\1\44\2\43\1\44\2\43\1\44\1\43\1\44\2\0"+
    "\1\21\3\0\1\43\6\0\1\43\6\45\1\43\2\45"+
    "\4\43\5\45\1\43\1\45\1\43\1\45\1\43\1\45"+
    "\1\43\1\45\1\43\1\45\2\43\1\45\2\43\1\45"+
    "\1\43\1\45\2\0\1\21\3\0\1\43\2\0\3\15"+
    "\1\14\1\35\6\26\1\35\2\26\4\35\5\26\1\35"+
    "\1\26\1\35\1\26\1\35\1\26\1\35\1\26\1\35"+
    "\1\26\2\35\1\26\2\35\1\26\1\35\1\26\1\15"+
    "\1\16\1\21\1\22\1\0\1\25\1\35\2\0\3\15"+
    "\1\46\46\15\1\16\4\0\1\15\2\0\1\47\1\50"+
    "\1\51\1\0\1\52\14\0\1\53\7\0\1\54\1\0"+
    "\1\55\1\0\1\56\1\0\1\57\1\0\1\60\1\61"+
    "\1\0\1\62\4\0\1\51\21\0\1\63\62\0\1\64"+
    "\63\0\1\65\45\0\3\15\1\14\1\66\6\35\1\66"+
    "\2\35\4\66\5\35\1\66\1\35\1\66\1\35\1\66"+
    "\1\35\1\66\1\35\1\66\1\35\2\66\1\35\2\66"+
    "\1\35\1\66\1\35\1\15\1\16\1\21\1\36\1\0"+
    "\1\23\1\66\2\0\3\15\1\14\45\35\1\15\1\16"+
    "\1\21\1\36\1\0\1\23\1\35\6\0\1\43\6\44"+
    "\1\43\2\44\4\43\5\44\1\43\1\44\1\43\1\44"+
    "\1\43\1\44\1\43\1\44\1\43\1\44\2\43\1\44"+
    "\2\43\1\44\1\43\1\44\2\0\1\21\2\0\1\67"+
    "\1\43\2\0\3\41\1\70\45\0\1\41\4\0\1\71"+
    "\4\0\2\41\46\0\1\41\14\0\45\43\2\0\1\21"+
    "\1\36\1\0\1\23\1\43\7\0\6\44\1\0\2\44"+
    "\4\0\5\44\1\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\2\0\1\44\2\0\1\44"+
    "\1\0\1\44\5\0\1\23\10\0\6\72\1\0\2\72"+
    "\4\0\5\72\1\0\1\72\1\0\1\72\1\0\1\72"+
    "\1\0\1\72\1\0\1\72\2\0\1\72\2\0\1\72"+
    "\1\0\1\72\5\0\1\23\3\0\3\73\1\0\45\15"+
    "\1\73\5\0\1\15\3\0\2\51\46\0\1\51\10\0"+
    "\3\51\52\0\1\74\61\0\1\74\14\0\1\75\66\0"+
    "\1\76\54\0\1\77\63\0\1\100\77\0\1\101\1\0"+
    "\1\102\55\0\1\103\56\0\1\104\52\0\1\105\52\0"+
    "\1\106\66\0\1\107\117\0\1\110\20\0\1\31\52\0"+
    "\3\111\1\14\45\35\1\111\1\16\1\21\1\36\1\0"+
    "\1\23\1\35\6\0\1\112\6\0\1\112\2\0\4\112"+
    "\5\0\1\112\1\0\1\112\1\0\1\112\1\0\1\112"+
    "\1\0\1\112\1\0\2\112\1\0\2\112\1\0\1\112"+
    "\6\0\1\113\1\112\5\0\1\70\63\0\6\44\1\0"+
    "\2\44\4\0\5\44\1\0\1\44\1\0\1\44\1\0"+
    "\1\44\1\0\1\44\1\0\1\44\2\0\1\44\2\0"+
    "\1\44\1\0\1\44\5\0\1\114\3\0\3\115\1\14"+
    "\45\15\1\115\1\16\4\0\1\15\3\0\2\116\117\0"+
    "\1\117\31\0\1\120\103\0\1\121\53\0\1\122\11\0"+
    "\1\123\37\0\1\124\71\0\1\125\52\0\1\126\4\0"+
    "\1\126\46\0\1\127\115\0\1\130\41\0\1\130\43\0"+
    "\1\131\70\0\1\132\45\0\3\133\1\14\45\15\1\133"+
    "\1\16\4\0\1\15\6\0\1\112\6\0\1\112\2\0"+
    "\4\112\5\0\1\112\1\0\1\112\1\0\1\112\1\0"+
    "\1\112\1\0\1\112\1\0\2\112\1\0\2\112\1\0"+
    "\1\112\7\0\1\112\6\0\1\134\6\44\1\135\2\44"+
    "\1\136\1\137\1\43\1\140\5\44\1\141\1\44\1\43"+
    "\1\44\1\43\1\44\1\43\1\44\1\43\1\44\2\43"+
    "\1\44\2\43\1\44\1\43\1\44\2\0\1\21\3\0"+
    "\1\43\2\0\3\142\1\14\45\15\1\142\1\16\4\0"+
    "\1\15\2\0\3\143\46\0\1\143\17\0\1\130\76\0"+
    "\1\123\61\0\1\76\71\0\1\123\41\0\1\51\53\0"+
    "\1\144\60\0\1\145\61\0\1\123\102\0\1\146\40\0"+
    "\1\147\76\0\1\150\53\0\1\150\45\0\3\151\1\14"+
    "\45\15\1\151\1\16\4\0\1\15\6\0\1\43\1\152"+
    "\43\43\2\0\1\21\1\36\1\0\1\23\1\43\6\0"+
    "\4\43\1\153\40\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\6\0\13\43\1\154\31\43\2\0\1\21\1\36"+
    "\1\0\1\23\1\43\6\0\11\43\1\155\33\43\2\0"+
    "\1\21\1\36\1\0\1\23\1\43\6\0\16\43\1\156"+
    "\26\43\2\0\1\21\1\36\1\0\1\23\1\43\6\0"+
    "\10\43\1\157\34\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\2\0\3\15\1\160\46\15\1\16\4\0\1\15"+
    "\2\0\3\161\46\0\1\161\17\0\1\123\74\0\1\51"+
    "\71\0\1\162\37\0\1\163\125\0\1\164\5\0\3\165"+
    "\1\14\45\15\1\165\1\16\4\0\1\15\6\0\2\43"+
    "\1\166\42\43\2\0\1\21\1\36\1\0\1\23\1\43"+
    "\6\0\2\43\1\167\42\43\2\0\1\21\1\36\1\0"+
    "\1\23\1\43\6\0\14\43\1\170\30\43\2\0\1\21"+
    "\1\36\1\0\1\23\1\43\6\0\21\43\1\171\23\43"+
    "\2\0\1\21\1\36\1\0\1\23\1\43\6\0\4\43"+
    "\1\172\40\43\2\0\1\21\1\36\1\0\1\23\1\43"+
    "\6\0\24\43\1\173\20\43\2\0\1\21\1\36\1\0"+
    "\1\23\1\43\2\0\3\174\1\0\45\15\1\174\5\0"+
    "\1\15\2\0\3\175\46\0\1\175\34\0\1\176\46\0"+
    "\1\146\55\0\6\177\1\0\2\177\4\0\5\177\1\0"+
    "\1\177\1\0\1\177\1\0\1\177\1\0\1\177\1\0"+
    "\1\177\2\0\1\177\2\0\1\177\1\0\1\177\11\0"+
    "\3\200\1\14\45\15\1\200\1\16\4\0\1\15\6\0"+
    "\3\43\1\201\41\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\6\0\3\43\1\202\41\43\2\0\1\21\1\36"+
    "\1\0\1\23\1\43\6\0\1\203\44\43\2\0\1\21"+
    "\1\36\1\0\1\23\1\43\6\0\22\43\1\204\22\43"+
    "\2\0\1\21\1\36\1\0\1\23\1\43\6\0\17\43"+
    "\1\205\25\43\2\0\1\21\1\36\1\0\1\23\1\43"+
    "\6\0\1\43\1\206\43\43\2\0\1\21\1\36\1\0"+
    "\1\23\1\43\2\0\3\207\1\14\45\15\1\207\1\16"+
    "\4\0\1\15\12\0\1\51\51\0\3\210\1\14\45\15"+
    "\1\210\1\16\4\0\1\15\6\0\4\43\1\211\40\43"+
    "\2\0\1\21\1\36\1\0\1\23\1\43\6\0\1\43"+
    "\1\212\43\43\2\0\1\21\1\36\1\0\1\23\1\43"+
    "\6\0\1\43\6\203\1\43\2\203\4\43\5\203\1\43"+
    "\1\203\1\43\1\203\1\43\1\203\1\43\1\203\1\43"+
    "\1\203\2\43\1\203\2\43\1\203\1\43\1\203\2\0"+
    "\1\21\1\36\1\0\1\23\1\43\6\0\2\43\1\213"+
    "\42\43\2\0\1\21\1\36\1\0\1\23\1\43\6\0"+
    "\3\43\1\214\41\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\6\0\2\43\1\215\42\43\2\0\1\21\1\36"+
    "\1\0\1\23\1\43\2\0\3\15\1\216\46\15\1\16"+
    "\4\0\1\15\2\0\3\15\1\14\1\217\6\15\1\217"+
    "\2\15\4\217\5\15\1\217\1\15\1\217\1\15\1\217"+
    "\1\15\1\217\1\15\1\217\1\15\2\217\1\15\2\217"+
    "\1\15\1\217\2\15\1\16\4\0\1\217\6\0\5\43"+
    "\1\220\37\43\2\0\1\21\1\36\1\0\1\23\1\43"+
    "\6\0\10\43\1\221\34\43\2\0\1\21\1\36\1\0"+
    "\1\23\1\43\6\0\3\43\1\222\41\43\2\0\1\21"+
    "\1\36\1\0\1\23\1\43\6\0\20\43\1\223\24\43"+
    "\2\0\1\21\1\36\1\0\1\23\1\43\6\0\3\43"+
    "\1\224\41\43\2\0\1\21\1\36\1\0\1\23\1\43"+
    "\2\0\3\225\1\0\45\15\1\225\5\0\1\15\2\0"+
    "\3\15\1\14\1\226\6\15\1\226\2\15\4\226\5\15"+
    "\1\226\1\15\1\226\1\15\1\226\1\15\1\226\1\15"+
    "\1\226\1\15\2\226\1\15\2\226\1\15\1\226\2\15"+
    "\1\16\4\0\1\226\6\0\6\43\1\227\36\43\2\0"+
    "\1\21\1\36\1\0\1\23\1\43\6\0\11\43\1\203"+
    "\33\43\2\0\1\21\1\36\1\0\1\23\1\43\6\0"+
    "\20\43\1\230\24\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\6\0\10\43\1\231\34\43\2\0\1\21\1\36"+
    "\1\0\1\23\1\43\6\0\1\43\1\232\43\43\2\0"+
    "\1\21\1\36\1\0\1\23\1\43\2\0\3\233\1\14"+
    "\45\15\1\233\1\16\4\0\1\15\2\0\3\15\1\14"+
    "\1\234\6\15\1\234\2\15\4\234\5\15\1\234\1\15"+
    "\1\234\1\15\1\234\1\15\1\234\1\15\1\234\1\15"+
    "\2\234\1\15\2\234\1\15\1\234\2\15\1\16\4\0"+
    "\1\234\6\0\2\43\1\203\42\43\2\0\1\21\1\36"+
    "\1\0\1\23\1\43\6\0\1\43\1\235\43\43\2\0"+
    "\1\21\1\36\1\0\1\23\1\43\6\0\5\43\1\236"+
    "\37\43\2\0\1\21\1\36\1\0\1\23\1\43\6\0"+
    "\17\43\1\237\25\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\2\0\3\15\1\14\1\240\6\15\1\240\2\15"+
    "\4\240\5\15\1\240\1\15\1\240\1\15\1\240\1\15"+
    "\1\240\1\15\1\240\1\15\2\240\1\15\2\240\1\15"+
    "\1\240\2\15\1\16\4\0\1\240\6\0\6\43\1\241"+
    "\36\43\2\0\1\21\1\36\1\0\1\23\1\43\6\0"+
    "\4\43\1\242\40\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\6\0\6\43\1\203\36\43\2\0\1\21\1\36"+
    "\1\0\1\23\1\43\2\0\3\15\1\14\1\243\6\15"+
    "\1\243\2\15\4\243\5\15\1\243\1\15\1\243\1\15"+
    "\1\243\1\15\1\243\1\15\1\243\1\15\2\243\1\15"+
    "\2\243\1\15\1\243\2\15\1\16\4\0\1\243\6\0"+
    "\16\43\1\203\26\43\2\0\1\21\1\36\1\0\1\23"+
    "\1\43\6\0\17\43\1\244\25\43\2\0\1\21\1\36"+
    "\1\0\1\23\1\43\2\0\3\245\1\14\45\15\1\245"+
    "\1\16\4\0\1\15\6\0\6\43\1\246\36\43\2\0"+
    "\1\21\1\36\1\0\1\23\1\43\2\0\3\247\1\14"+
    "\45\15\1\247\1\16\4\0\1\15\6\0\11\43\1\224"+
    "\33\43\2\0\1\21\1\36\1\0\1\23\1\43\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\7\1\6\0\1\1\1\0\1\1\3\0"+
    "\1\1\10\0\3\1\25\0\1\1\22\0\1\11\62\0"+
    "\1\11\1\0\1\1\3\0\1\1\27\0\1\1\13\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexemas(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexema=yytext(); return Curp;
            }
          case 10: break;
          case 2: 
            { lexema=yytext(); return Error;
            }
          case 11: break;
          case 3: 
            { lexema=yytext(); return Nombre;
            }
          case 12: break;
          case 4: 
            { /*Ignorar*/
            }
          case 13: break;
          case 5: 
            { lexema=yytext(); return Direccion;
            }
          case 14: break;
          case 6: 
            { lexema=yytext(); return Nacimiento;
            }
          case 15: break;
          case 7: 
            { lexema=yytext(); return Correo;
            }
          case 16: break;
          case 8: 
            { lexema=yytext(); return Carrera;
            }
          case 17: break;
          case 9: 
            { lexema=yytext(); return Celular;
            }
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
